name: SafeW - RSS监听+去重推送
on:
  schedule:
    - cron: '*/1 * * * *'
  workflow_dispatch:

jobs:
  rss-push:
    runs-on: ubuntu-latest
    steps:
      - name: 安装Python依赖
        run: pip install --upgrade requests feedparser

      - name: 执行RSS监听+去重推送脚本
        env:
          SAFEW_BOT_TOKEN: ${{ secrets.SAFEW_BOT_TOKEN }}
          SAFEW_CHAT_ID: ${{ secrets.SAFEW_CHAT_ID }}
          RSS_GITHUB_PAT: ${{ secrets.RSS_GITHUB_PAT }}
          GITHUB_REPO: ${{ github.repository }}
          STORE_ISSUE_TITLE: "已推送RSS链接记录"
          RSS_FEED_URL: ${{ secrets.RSS_FEED_URL }}
        run: |
          # 使用heredoc语法传递Python代码，避免引号冲突
          python - <<END
          import os
          import requests
          import feedparser
          from datetime import datetime

          # 读取环境变量
          safew_bot_token = os.getenv('SAFEW_BOT_TOKEN')
          safew_chat_id = os.getenv('SAFEW_CHAT_ID')
          github_pat = os.getenv('RSS_GITHUB_PAT')
          github_repo = os.getenv('GITHUB_REPO')
          store_issue_title = os.getenv('STORE_ISSUE_TITLE')
          rss_feed_url = os.getenv('RSS_FEED_URL')

          # GitHub API请求头
          github_headers = {
              'Authorization': 'token ' + github_pat,
              'Accept': 'application/vnd.github.v3+json'
          }

          # 解析RSS源
          def parse_rss():
              try:
                  feed = feedparser.parse(rss_feed_url)
                  if feed.bozo != 0:
                      print('❌ RSS解析失败：' + str(feed.bozo_exception))
                      return []
                  entries = []
                  for entry in feed.entries:
                      entries.append({
                          'title': entry.get('title', '无标题'),
                          'link': entry.get('link', ''),
                          'summary': entry.get('summary', '无摘要')[:150] + '...' if len(entry.get('summary', '')) > 150 else entry.get('summary', '无摘要'),
                          'published': entry.get('published', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
                      })
                  print('✅ 解析到' + str(len(entries)) + '条RSS条目')
                  return entries
              except Exception as e:
                  print('❌ RSS解析异常：' + str(e))
                  return []

          # 读取已推送链接（GitHub Issues）
          def get_pushed_links():
              search_url = 'https://api.github.com/search/issues?q=repo:' + github_repo + '+title:"' + store_issue_title + '"+state:open'
              response = requests.get(search_url, headers=github_headers)
              if response.status_code != 200:
                  print('❌ 搜索存储Issue失败：' + response.text)
                  return set(), None
              
              search_result = response.json()
              if search_result['total_count'] == 0:
                  create_url = 'https://api.github.com/repos/' + github_repo + '/issues'
                  create_resp = requests.post(create_url, headers=github_headers, json={
                      'title': store_issue_title,
                      'body': '# 已推送RSS链接记录\n\n以下为已推送的链接，每行一个：\n',
                      'labels': ['rss-store']
                  })
                  if create_resp.status_code == 201:
                      print('✅ 创建存储Issue成功')
                      return set(), create_resp.json()['number']
                  else:
                      print('❌ 创建存储Issue失败：' + create_resp.text)
                      return set(), None
              
              store_issue_id = search_result['items'][0]['number']
              issue_resp = requests.get('https://api.github.com/repos/' + github_repo + '/issues/' + str(store_issue_id), headers=github_headers)
              if issue_resp.status_code != 200:
                  print('❌ 获取存储Issue失败：' + issue_resp.text)
                  return set(), None
              
              pushed_links = set()
              for line in issue_resp.json()['body'].split('\n'):
                  if line.strip().startswith('http'):
                      pushed_links.add(line.strip())
              print('✅ 读取到' + str(len(pushed_links)) + '条已推送链接')
              return pushed_links, store_issue_id

          # 推送消息到SafeW
          def push_to_safew(entry):
              def escape(s):
                  for c in '_*~`>#+-.!()':
                      s = s.replace(c, '\\' + c)
                  return s
              
              msg = '🔔 RSS新内容提醒\n'
              msg += '----------------\n'
              msg += '**标题**：' + escape(entry['title']) + '\n'
              msg += '**发布时间**：' + entry['published'] + '\n'
              msg += '**摘要**：' + escape(entry['summary']) + '\n'
              msg += '**链接**：' + escape(entry['link'])
              
              api_url = 'https://api.safew.org/bot' + safew_bot_token + '/sendMessage'
              response = requests.post(api_url, params={
                  'chat_id': safew_chat_id,
                  'text': msg,
                  'parse_mode': 'Markdown',
                  'disable_web_page_preview': True
              })
              
              if response.status_code == 200:
                  print('✅ 推送成功：' + entry['title'])
                  return True
              else:
                  print('❌ 推送失败：' + response.text)
                  return False

          # 更新已推送链接记录
          def update_pushed_links(issue_id, new_links):
              if not new_links or not issue_id:
                  return
              
              issue_resp = requests.get('https://api.github.com/repos/' + github_repo + '/issues/' + str(issue_id), headers=github_headers)
              if issue_resp.status_code != 200:
                  print('❌ 无法更新存储：' + issue_resp.text)
                  return
              
              updated_body = issue_resp.json()['body'] + '\n' + '\n'.join(new_links)
              requests.patch('https://api.github.com/repos/' + github_repo + '/issues/' + str(issue_id), headers=github_headers, json={
                  'body': updated_body
              })
              print('✅ 更新存储成功，新增' + str(len(new_links)) + '条链接')

          # 主函数
          def main():
              entries = parse_rss()
              if not entries:
                  return
              
              pushed, issue_id = get_pushed_links()
              if issue_id is None:
                  return
              
              new_entries = [e for e in entries if e['link'] not in pushed and e['link']]
              if not new_entries:
                  print('ℹ️ 无新内容推送')
                  return
              
              success = []
              for e in new_entries[:5]:
                  if push_to_safew(e):
                      success.append(e['link'])
              
              if success:
                  update_pushed_links(issue_id, success)

          if __name__ == '__main__':
              main()
          END
