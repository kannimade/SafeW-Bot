name: SafeW - RSS监听+去重推送
on:
  schedule:
    - cron: '*/1 * * * *'
  workflow_dispatch:

jobs:
  rss-push:
    runs-on: ubuntu-latest
    steps:
      - name: 安装Python依赖
        run: pip install --upgrade requests feedparser

      - name: 执行RSS监听+去重推送脚本
        env:
          SAFEW_BOT_TOKEN: ${{ secrets.SAFEW_BOT_TOKEN }}
          SAFEW_CHAT_ID: ${{ secrets.SAFEW_CHAT_ID }}
          RSS_GITHUB_PAT: ${{ secrets.RSS_GITHUB_PAT }}
          GITHUB_REPO: ${{ github.repository }}
          STORE_ISSUE_TITLE: "已推送RSS链接记录"
          RSS_FEED_URL: ${{ secrets.RSS_FEED_URL }}
        run: |
          python - <<END
          import os
          import requests
          import feedparser
          import traceback
          from datetime import datetime

          # 环境变量校验
          required_vars = ['SAFEW_BOT_TOKEN', 'SAFEW_CHAT_ID', 'RSS_GITHUB_PAT', 'RSS_FEED_URL']
          missing_vars = [var for var in required_vars if not (os.getenv(var) and os.getenv(var).strip())]
          if missing_vars:
              print(f'❌ 缺失环境变量：{missing_vars}')
              exit(1)

          # 读取环境变量
          safew_bot_token = os.getenv('SAFEW_BOT_TOKEN').strip()
          safew_chat_id = os.getenv('SAFEW_CHAT_ID').strip()
          github_pat = os.getenv('RSS_GITHUB_PAT').strip()
          github_repo = os.getenv('GITHUB_REPO').strip()
          store_issue_title = os.getenv('STORE_ISSUE_TITLE').strip()
          rss_feed_url = os.getenv('RSS_FEED_URL').strip()

          github_headers = {
              'Authorization': f'token {github_pat}',
              'Accept': 'application/vnd.github.v3+json'
          }

          # 解析RSS源
          def parse_rss():
              try:
                  feed = feedparser.parse(rss_feed_url)
                  if feed.bozo != 0:
                      print(f'❌ RSS解析错误：{feed.bozo_exception}')
                      return []
                  entries = []
                  for entry in feed.entries:
                      entries.append({
                          'title': entry.get('title', '无标题'),
                          'link': entry.get('link', ''),
                          'summary': entry.get('summary', '无摘要')[:150] + '...' if len(entry.get('summary', '')) > 150 else entry.get('summary', '无摘要'),
                          'published': entry.get('published', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
                      })
                  return entries
              except Exception as e:
                  print(f'❌ RSS解析异常：')
                  traceback.print_exc()
                  return []

          # 读取已推送链接
          def get_pushed_links():
              try:
                  search_url = f'https://api.github.com/search/issues?q=repo:{github_repo}+title:"{store_issue_title}"+state:open'
                  response = requests.get(search_url, headers=github_headers, timeout=15)
                  response.raise_for_status()
                  
                  search_result = response.json()
                  if search_result['total_count'] == 0:
                      create_url = f'https://api.github.com/repos/{github_repo}/issues'
                      create_resp = requests.post(create_url, headers=github_headers, json={
                          'title': store_issue_title,
                          'body': '# 已推送RSS链接记录\n\n以下为已推送的链接，每行一个：\n',
                          'labels': ['rss-store']
                      }, timeout=15)
                      create_resp.raise_for_status()
                      return set(), create_resp.json()['number']
                  
                  store_issue_id = search_result['items'][0]['number']
                  issue_resp = requests.get(f'https://api.github.com/repos/{github_repo}/issues/{store_issue_id}', headers=github_headers, timeout=15)
                  issue_resp.raise_for_status()
                  
                  pushed_links = set()
                  for line in issue_resp.json()['body'].split('\n'):
                      if line.strip().startswith('http'):
                          pushed_links.add(line.strip())
                  return pushed_links, store_issue_id
              
              except Exception as e:
                  print(f'❌ 读取已推送链接异常：')
                  traceback.print_exc()
                  return set(), None

          # 推送消息到SafeW（核心修正：移除反引号`）
          def push_to_safew(entry):
              # 转义特殊字符（移除反引号`，避免Shell解析错误）
              def escape(s):
                  special_chars = r"_*~>#+-.!()"  # 关键：去掉了`
                  for c in special_chars:
                      s = s.replace(c, f'\\{c}')
                  return s
              
              msg = '🔔 RSS新内容提醒\n'
              msg += '----------------\n'
              msg += f'**标题**：{escape(entry["title"])}\n'
              msg += f'**发布时间**：{entry["published"]}\n'
              msg += f'**摘要**：{escape(entry["summary"])}\n'
              msg += f'**链接**：{escape(entry["link"])}'
              
              try:
                  api_url = f'https://api.safew.org/bot{safew_bot_token}/sendMessage'
                  response = requests.post(api_url, params={
                      'chat_id': safew_chat_id,
                      'text': msg,
                      'parse_mode': 'Markdown',
                      'disable_web_page_preview': True
                  }, timeout=15)
                  response.raise_for_status()
                  print(f'✅ 推送成功：{entry["title"]}')
                  return True
              except Exception as e:
                  print(f'❌ 推送失败：')
                  traceback.print_exc()
                  return False

          # 更新已推送链接
          def update_pushed_links(issue_id, new_links):
              if not new_links or not issue_id:
                  return
              try:
                  issue_resp = requests.get(f'https://api.github.com/repos/{github_repo}/issues/{issue_id}', headers=github_headers, timeout=15)
                  issue_resp.raise_for_status()
                  
                  updated_body = issue_resp.json()['body'] + '\n' + '\n'.join(new_links)
                  requests.patch(f'https://api.github.com/repos/{github_repo}/issues/{issue_id}', headers=github_headers, json={'body': updated_body}, timeout=15)
                  print(f'✅ 更新存储成功')
              except Exception as e:
                  print(f'❌ 更新存储异常：')
                  traceback.print_exc()

          # 主函数
          def main():
              try:
                  entries = parse_rss()
                  if not entries:
                      print('ℹ️ 无RSS条目')
                      return
                  
                  pushed_links, issue_id = get_pushed_links()
                  if issue_id is None:
                      print('❌ 无存储Issue')
                      return
                  
                  new_entries = [e for e in entries if e['link'] not in pushed_links and e['link']]
                  if not new_entries:
                      print('ℹ️ 无新内容')
                      return
                  
                  success_links = [e['link'] for e in new_entries[:5] if push_to_safew(e)]
                  if success_links:
                      update_pushed_links(issue_id, success_links)
              
              except Exception as e:
                  print(f'❌ 主程序异常：')
                  traceback.print_exc()
                  exit(1)

          if __name__ == '__main__':
              main()
              print('✅ 程序正常结束')
          END
