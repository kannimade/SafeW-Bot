name: SafeW - RSS监听+去重推送
on:
  schedule:
    - cron: '*/1 * * * *'
  workflow_dispatch:

jobs:
  rss-push:
    runs-on: ubuntu-latest
    steps:
      - name: 安装Python依赖
        run: pip install --upgrade requests feedparser

      - name: 执行RSS监听+去重推送脚本
        env:
          SAFEW_BOT_TOKEN: ${{ secrets.SAFEW_BOT_TOKEN }}
          SAFEW_CHAT_ID: ${{ secrets.SAFEW_CHAT_ID }}
          RSS_GITHUB_PAT: ${{ secrets.RSS_GITHUB_PAT }}
          GITHUB_REPO: ${{ github.repository }}
          STORE_ISSUE_TITLE: "已推送RSS链接记录"
          RSS_FEED_URL: ${{ secrets.RSS_FEED_URL }}
        run: |
          python -c "
          import os
          import requests
          import feedparser
          from datetime import datetime

          # 配置参数读取
          safew_bot_token = os.getenv('SAFEW_BOT_TOKEN')
          safew_chat_id = os.getenv('SAFEW_CHAT_ID')
          github_pat = os.getenv('RSS_GITHUB_PAT')
          github_repo = os.getenv('GITHUB_REPO')
          store_issue_title = os.getenv('STORE_ISSUE_TITLE')
          rss_feed_url = os.getenv('RSS_FEED_URL')

          github_headers = {
              'Authorization': f'token {github_pat}',
              'Accept': 'application/vnd.github.v3+json'
          }

          # 解析RSS源
          def parse_rss():
              try:
                  feed = feedparser.parse(rss_feed_url)
                  if feed.bozo != 0:
                      print(f'❌ RSS解析失败：{feed.bozo_exception}')
                      return []
                  entries = []
                  for entry in feed.entries:
                      entries.append({
                          'title': entry.get('title', '无标题'),
                          'link': entry.get('link', ''),
                          'summary': entry.get('summary', '无摘要')[:150] + '...' if len(entry.get('summary', '')) > 150 else entry.get('summary', '无摘要'),
                          'published': entry.get('published', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
                      })
                  print(f'✅ 解析到{len(entries)}条RSS条目')
                  return entries
              except Exception as e:
                  print(f'❌ RSS解析异常：{str(e)}')
                  return []

          # 读取已推送链接
          def get_pushed_links():
              search_url = f'https://api.github.com/search/issues?q=repo:{github_repo}+title:"{store_issue_title}"+state:open'
              response = requests.get(search_url, headers=github_headers)
              if response.status_code != 200:
                  print(f'❌ 搜索存储Issue失败：{response.text}')
                  return set(), None
              
              search_result = response.json()
              if search_result['total_count'] == 0:
                  create_url = f'https://api.github.com/repos/{github_repo}/issues'
                  create_resp = requests.post(create_url, headers=github_headers, json={
                      'title': store_issue_title,
                      'body': '# 已推送RSS链接记录\n\n以下为已推送的链接，每行一个：\n',
                      'labels': ['rss-store']
                  })
                  if create_resp.status_code == 201:
                      print(f'✅ 创建存储Issue成功')
                      return set(), create_resp.json()['number']
                  else:
                      print(f'❌ 创建存储Issue失败：{create_resp.text}')
                      return set(), None
              
              store_issue_id = search_result['items'][0]['number']
              issue_resp = requests.get(f'https://api.github.com/repos/{github_repo}/issues/{store_issue_id}', headers=github_headers)
              if issue_resp.status_code != 200:
                  print(f'❌ 获取存储Issue失败：{issue_resp.text}')
                  return set(), None
              
              pushed_links = set()
              for line in issue_resp.json()['body'].split('\n'):
                  if line.strip().startswith('http'):
                      pushed_links.add(line.strip())
              print(f'✅ 读取到{len(pushed_links)}条已推送链接')
              return pushed_links, store_issue_id

          # 推送消息（单行字符串拼接，避免格式问题）
          def push_to_safew(entry):
              # 转义Markdown特殊字符
              def escape(s):
                  for c in r'_*~`>#+-.!()':
                      s = s.replace(c, f'\{c}')
                  return s
              
              # 用单行拼接构建消息，避免多行引号
              msg = '🔔 RSS新内容提醒\n'
              msg += '----------------\n'
              msg += f'**标题**：{escape(entry["title"])}\n'
              msg += f'**发布时间**：{entry["published"]}\n'
              msg += f'**摘要**：{escape(entry["summary"])}\n'
              msg += f'**链接**：{escape(entry["link"])}'
              
              api_url = f'https://api.safew.org/bot{safew_bot_token}/sendMessage'
              response = requests.post(api_url, params={
                  'chat_id': safew_chat_id,
                  'text': msg,
                  'parse_mode': 'Markdown',
                  'disable_web_page_preview': True
              })
              
              if response.status_code == 200:
                  print(f'✅ 推送成功：{entry["title"]}')
                  return True
              else:
                  print(f'❌ 推送失败：{response.text}')
                  return False

          # 更新已推送链接
          def update_pushed_links(issue_id, new_links):
              if not new_links or not issue_id:
                  return
              
              issue_resp = requests.get(f'https://api.github.com/repos/{github_repo}/issues/{issue_id}', headers=github_headers)
              if issue_resp.status_code != 200:
                  print(f'❌ 无法更新存储：{issue_resp.text}')
                  return
              
              updated_body = issue_resp.json()['body'] + '\n' + '\n'.join(new_links)
              requests.patch(f'https://api.github.com/repos/{github_repo}/issues/{issue_id}', headers=github_headers, json={
                  'body': updated_body
              })
              print(f'✅ 更新存储成功，新增{len(new_links)}条链接')

          # 主函数
          def main():
              entries = parse_rss()
              if not entries:
                  return
              
              pushed, issue_id = get_pushed_links()
              if issue_id is None:
                  return
              
              new_entries = [e for e in entries if e['link'] not in pushed and e['link']]
              if not new_entries:
                  print('ℹ️ 无新内容推送')
                  return
              
              success = []
              for e in new_entries[:5]:
                  if push_to_safew(e):
                      success.append(e['link'])
              
              if success:
                  update_pushed_links(issue_id, success)

          if __name__ == '__main__':
              main()
          "
