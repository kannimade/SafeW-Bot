name: SafeW - RSS监听+去重推送
on:
  schedule:
    - cron: '*/1 * * * *'
  workflow_dispatch:

jobs:
  rss-push:
    runs-on: ubuntu-latest
    steps:
      - name: 安装Python依赖
        run: pip install --upgrade requests feedparser

      - name: 执行RSS监听+去重推送脚本
        env:
          SAFEW_BOT_TOKEN: ${{ secrets.SAFEW_BOT_TOKEN }}
          SAFEW_CHAT_ID: ${{ secrets.SAFEW_CHAT_ID }}
          RSS_GITHUB_PAT: ${{ secrets.RSS_GITHUB_PAT }}
          GITHUB_REPO: ${{ github.repository }}
          STORE_ISSUE_TITLE: "已推送RSS链接记录"
          RSS_FEED_URL: ${{ secrets.RSS_FEED_URL }}
        run: |
          # 强制输出所有日志，避免缓冲导致信息丢失
          python - <<END | tee -a workflow.log
          import os
          import requests
          import feedparser
          import traceback
          import sys  # 新增：确保日志输出到stdout
          from datetime import datetime

          # 确保所有打印立即输出
          sys.stdout.flush()

          # -------------------------- 环境变量校验（终极版） --------------------------
          print("===== 开始环境变量校验 =====")
          required_vars = [
              'SAFEW_BOT_TOKEN', 'SAFEW_CHAT_ID', 
              'RSS_GITHUB_PAT', 'RSS_FEED_URL'
          ]
          for var in required_vars:
              value = os.getenv(var)
              if not value or not value.strip():
                  print(f'❌ 严重错误：环境变量【{var}】缺失或为空！')
                  exit(1)
              else:
                  print(f'✅ 环境变量【{var}】存在（值长度：{len(value.strip())}）')

          # 读取并清理环境变量
          safew_bot_token = os.getenv('SAFEW_BOT_TOKEN').strip()
          safew_chat_id = os.getenv('SAFEW_CHAT_ID').strip()
          github_pat = os.getenv('RSS_GITHUB_PAT').strip()
          github_repo = os.getenv('GITHUB_REPO').strip()
          store_issue_title = os.getenv('STORE_ISSUE_TITLE').strip()
          rss_feed_url = os.getenv('RSS_FEED_URL').strip()

          # 校验URL格式
          if not rss_feed_url.startswith(('http://', 'https://')):
              print(f'❌ 严重错误：RSS_FEED_URL【{rss_feed_url}】必须以http/https开头！')
              exit(1)
          print(f'✅ RSS_FEED_URL格式校验通过：{rss_feed_url}')

          github_headers = {
              'Authorization': 'token ' + github_pat,
              'Accept': 'application/vnd.github.v3+json'
          }
          print("===== 环境变量校验通过 =====")
          sys.stdout.flush()

          # -------------------------- 解析RSS源 --------------------------
          def parse_rss():
              try:
                  print("\n===== 开始解析RSS =====")
                  print(f'请求URL：{rss_feed_url}')
                  feed = feedparser.parse(rss_feed_url)
                  if feed.bozo != 0:
                      print(f'❌ RSS解析错误（格式问题）：{str(feed.bozo_exception)}')
                      return []
                  entries = []
                  for entry in feed.entries[:3]:  # 只解析前3条，减少数据量
                      entries.append({
                          'title': entry.get('title', '无标题'),
                          'link': entry.get('link', ''),
                          'summary': entry.get('summary', '无摘要')[:50] + '...',
                          'published': entry.get('published', '未知时间')
                      })
                  print(f'✅ 解析完成，获取{len(entries)}条条目')
                  sys.stdout.flush()
                  return entries
              except Exception as e:
                  print(f'❌ RSS解析失败（网络/其他问题）：')
                  traceback.print_exc()
                  sys.stdout.flush()
                  return []

          # -------------------------- 读取已推送链接 --------------------------
          def get_pushed_links():
              try:
                  print("\n===== 开始读取已推送链接 =====")
                  search_url = f'https://api.github.com/search/issues?q=repo:{github_repo}+title:"{store_issue_title}"+state:open'
                  print(f'搜索Issue URL：{search_url}')
                  response = requests.get(search_url, headers=github_headers, timeout=20)
                  print(f'GitHub搜索响应状态码：{response.status_code}')
                  response.raise_for_status()
                  
                  search_result = response.json()
                  print(f'搜索结果：{search_result.get("total_count")}个Issue')
                  
                  if search_result['total_count'] == 0:
                      print(f'创建新Issue...')
                      create_url = f'https://api.github.com/repos/{github_repo}/issues'
                      create_resp = requests.post(create_url, headers=github_headers, json={
                          'title': store_issue_title,
                          'body': '初始内容',
                          'labels': ['rss-store']
                      }, timeout=20)
                      print(f'创建Issue响应状态码：{create_resp.status_code}')
                      create_resp.raise_for_status()
                      issue_id = create_resp.json()['number']
                      print(f'✅ 新Issue ID：{issue_id}')
                      return set(), issue_id
                  
                  store_issue_id = search_result['items'][0]['number']
                  print(f'找到已有Issue ID：{store_issue_id}')
                  issue_resp = requests.get(
                      f'https://api.github.com/repos/{github_repo}/issues/{store_issue_id}',
                      headers=github_headers,
                      timeout=20
                  )
                  print(f'读取Issue响应状态码：{issue_resp.status_code}')
                  issue_resp.raise_for_status()
                  
                  pushed_links = set()
                  for line in issue_resp.json()['body'].split('\n')[:5]:  # 只读前5行
                      if line.strip().startswith('http'):
                          pushed_links.add(line.strip())
                  print(f'✅ 已推送链接数量：{len(pushed_links)}')
                  sys.stdout.flush()
                  return pushed_links, store_issue_id
              
              except Exception as e:
                  print(f'❌ 读取已推送链接失败：')
                  traceback.print_exc()
                  sys.stdout.flush()
                  return set(), None

          # -------------------------- 推送消息到SafeW --------------------------
          def push_to_safew(entry):
              try:
                  print("\n===== 开始推送消息 =====")
                  def escape(s):
                      for c in '_*~`>#+-.!()':
                          s = s.replace(c, '\\' + c)
                      return s
                  
                  msg = f'🔔 新内容：{escape(entry["title"])[:20]}\n链接：{escape(entry["link"])[:30]}'
                  print(f'待推送消息：{msg}')
                  
                  api_url = f'https://api.safew.org/bot{safew_bot_token}/sendMessage'
                  print(f'SafeW API URL：{api_url}')
                  print(f'Chat ID：{safew_chat_id}')
                  
                  response = requests.post(api_url, params={
                      'chat_id': safew_chat_id,
                      'text': msg,
                      'parse_mode': 'Markdown'
                  }, timeout=20)
                  print(f'SafeW响应状态码：{response.status_code}')
                  response.raise_for_status()
                  print(f'✅ 推送成功')
                  sys.stdout.flush()
                  return True
              
              except Exception as e:
                  print(f'❌ 推送消息失败：')
                  traceback.print_exc()
                  sys.stdout.flush()
                  return False

          # -------------------------- 主函数 --------------------------
          def main():
              try:
                  print("===== 程序开始运行 =====")
                  entries = parse_rss()
                  if not entries:
                      print("===== 无RSS条目，正常结束 =====")
                      return
                  
                  pushed_links, issue_id = get_pushed_links()
                  if issue_id is None:
                      print("===== 无法获取存储Issue，结束 =====")
                      return
                  
                  new_entries = [e for e in entries if e['link'] not in pushed_links and e['link']]
                  if not new_entries:
                      print("===== 无新内容，正常结束 =====")
                      return
                  print(f'待推送新条目数量：{len(new_entries)}')
                  
                  for entry in new_entries[:1]:  # 只推1条测试
                      push_to_safew(entry)
                  
                  print("===== 程序执行完成 =====")
              
              except Exception as e:
                  print(f'❌ 主程序最终异常：')
                  traceback.print_exc()
                  sys.stdout.flush()
                  exit(1)

          if __name__ == '__main__':
              main()
              print("===== 程序正常退出 =====")
          END
          # 输出日志文件内容（确保所有日志被捕获）
          cat workflow.log
