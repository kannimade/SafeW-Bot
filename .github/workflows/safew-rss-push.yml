name: SafeW - RSS监听+去重推送
on:
  schedule:
    - cron: '*/1 * * * *'
  workflow_dispatch:

jobs:
  rss-push:
    runs-on: ubuntu-latest
    steps:
      - name: 安装Python依赖
        run: pip install --upgrade requests feedparser

      - name: 执行RSS监听+去重推送脚本
        env:
          SAFEW_BOT_TOKEN: ${{ secrets.SAFEW_BOT_TOKEN }}
          SAFEW_CHAT_ID: ${{ secrets.SAFEW_CHAT_ID }}
          RSS_GITHUB_PAT: ${{ secrets.RSS_GITHUB_PAT }}
          GITHUB_REPO: ${{ github.repository }}
          STORE_ISSUE_TITLE: "已推送RSS链接记录"
          RSS_FEED_URL: ${{ secrets.RSS_FEED_URL }}
        run: |
          python -c "
          import os
          import requests
          import feedparser
          from datetime import datetime

          safew_bot_token = os.getenv('SAFEW_BOT_TOKEN')
          safew_chat_id = os.getenv('SAFEW_CHAT_ID')
          github_pat = os.getenv('RSS_GITHUB_PAT')
          github_repo = os.getenv('GITHUB_REPO')
          store_issue_title = os.getenv('STORE_ISSUE_TITLE')
          rss_feed_url = os.getenv('RSS_FEED_URL')

          github_headers = {
              'Authorization': f'token {github_pat}',
              'Accept': 'application/vnd.github.v3+json'
          }

          def parse_rss():
              try:
                  feed = feedparser.parse(rss_feed_url)
                  if feed.bozo != 0:
                      print(f'❌ RSS解析失败：{feed.bozo_exception}')
                      return []
                  entries = []
                  for entry in feed.entries:
                      entry_data = {
                          'title': entry.get('title', '无标题'),
                          'link': entry.get('link', ''),
                          'summary': entry.get('summary', '无摘要')[:150] + '...' if len(entry.get('summary', '')) > 150 else entry.get('summary', '无摘要'),
                          'published': entry.get('published', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
                      }
                      entries.append(entry_data)
                  print(f'✅ 成功解析RSS，共获取{len(entries)}条条目')
                  return entries
              except Exception as e:
                  print(f'❌ RSS解析异常：{str(e)}')
                  return []

          def get_pushed_links():
              search_url = f'https://api.github.com/search/issues?q=repo:{github_repo}+title:"{store_issue_title}"+state:open'
              response = requests.get(search_url, headers=github_headers)
              if response.status_code != 200:
                  print(f'❌ 搜索存储Issue失败：{response.text}')
                  return set(), None
              
              search_result = response.json()
              if search_result['total_count'] == 0:
                  create_url = f'https://api.github.com/repos/{github_repo}/issues'
                  create_data = {
                      'title': store_issue_title,
                      'body': '# 已推送RSS链接记录\n\n以下为已推送的RSS链接，每行一个，用于去重：\n',
                      'labels': ['rss-store']
                  }
                  create_resp = requests.post(create_url, headers=github_headers, json=create_data)
                  if create_resp.status_code == 201:
                      print(f'✅ 首次运行，创建存储Issue成功')
                      return set(), create_resp.json()['number']
                  else:
                      print(f'❌ 创建存储Issue失败：{create_resp.text}')
                      return set(), None
              
              store_issue_id = search_result['items'][0]['number']
              issue_url = f'https://api.github.com/repos/{github_repo}/issues/{store_issue_id}'
              issue_resp = requests.get(issue_url, headers=github_headers)
              if issue_resp.status_code != 200:
                  print(f'❌ 获取存储Issue内容失败：{issue_resp.text}')
                  return set(), None
              
              issue_body = issue_resp.json()['body']
              pushed_links = set()
              for line in issue_body.split('\n'):
                  line = line.strip()
                  if line.startswith('http'):
                      pushed_links.add(line)
              print(f'✅ 读取已推送链接，共{len(pushed_links)}条')
              return pushed_links, store_issue_id

          def push_to_safew(entry):
              message = f'''
🔔 RSS新内容提醒
----------------
**标题**：{entry['title']}
**发布时间**：{entry['published']}
**摘要**：{entry['summary']}
**链接**：{entry['link']}
              '''
              
              api_url = f'https://api.safew.org/bot{safew_bot_token}/sendMessage'
              params = {
                  'chat_id': safew_chat_id,
                  'text': message,
                  'parse_mode': 'Markdown',
                  'disable_web_page_preview': True
              }
              
              response = requests.post(api_url, params=params)
              if response.status_code == 200:
                  print(f'✅ 推送成功：{entry["title"]}')
                  return True
              else:
                  print(f'❌ 推送失败：{entry["title"]}，响应：{response.text}')
                  return False

          def update_pushed_links(store_issue_id, new_links):
              if not new_links or not store_issue_id:
                  return
              
              issue_url = f'https://api.github.com/repos/{github_repo}/issues/{store_issue_id}'
              issue_resp = requests.get(issue_url, headers=github_headers)
              if issue_resp.status_code != 200:
                  print(f'❌ 更新存储失败：无法获取Issue内容')
                  return
              
              current_body = issue_resp.json()['body']
              new_links_text = '\n'.join(new_links)
              updated_body = f'{current_body}\n{new_links_text}'
              
              update_url = f'https://api.github.com/repos/{github_repo}/issues/{store_issue_id}'
              update_data = {'body': updated_body}
              update_resp = requests.patch(update_url, headers=github_headers, json=update_data)
              if update_resp.status_code == 200:
                  print(f'✅ 已更新存储，新增{len(new_links)}条链接')
              else:
                  print(f'❌ 更新存储失败：{update_resp.text}')

          def main():
              rss_entries = parse_rss()
              if not rss_entries:
                  return
              
              pushed_links, store_issue_id = get_pushed_links()
              if store_issue_id is None:
                  print(f'❌ 无法获取存储Issue ID，终止推送')
                  return
              
              new_entries = [entry for entry in rss_entries if entry['link'] not in pushed_links and entry['link'] != '']
              if not new_entries:
                  print(f'ℹ️  无新内容可推送，结束执行')
                  return
              print(f'✅ 筛选出未推送条目：{len(new_entries)}条')
              
              success_links = []
              for entry in new_entries[:5]:
                  if push_to_safew(entry):
                      success_links.append(entry['link'])
              
              if success_links:
                  update_pushed_links(store_issue_id, success_links)

          if __name__ == '__main__':
              main()
          "
